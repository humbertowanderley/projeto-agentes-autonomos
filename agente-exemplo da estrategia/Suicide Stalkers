import random

import sc2
from sc2 import Race, Difficulty
from sc2.constants import *
from sc2.player import Bot, Computer
import time

class MyBot(sc2.BotAI):
    def __init__(self):
        self.warpgate_started = False
        self.proxy_built = False
        self.proxy1 = 0
        self.estado_passivo = 'construir'

    async def on_step(self, iteration):
        #Reorganiza os workers nos slots de coleta de recursos
        await self.distribute_workers()

        #Se não existe nenhum nexus, faz todos os workers atacarem a base inimiga
        if not self.units(NEXUS).ready.exists:
            for worker in self.workers:
                await self.do(worker.attack(self.enemy_start_locations[0]))
            return
        else:
            #define o nexus principal
            main_nexus = self.units(NEXUS).ready.first
            #Faz expansão apartir de algum tempo e se o número total de nexus for menor que 2
            if self.estado_passivo == 'expandir' and self.can_afford(NEXUS) and not self.already_pending(NEXUS):
                await self.expand_now()
                self.estado_passivo = 'construir'
                print ('construir')


        #Constroi um novo pylon próximo ao nexux principal sempre que a capacidade populacional estiver a beira de atingir o limite
        if self.supply_left < 5 and not self.already_pending(PYLON):
            if self.can_afford(PYLON):
                await self.build(PYLON, near=main_nexus.position.towards(self.game_info.map_center, 3))
            return

        #Define o número máximo de workers baseado na quantidade de nexus disponíveis e um limiar de 40 workers
        if (self.workers.amount < self.units(NEXUS).amount*20 and self.workers.amount < 40) and main_nexus.noqueue and self.supply_left > 0:
            if self.can_afford(PROBE):
                await self.do(main_nexus.train(PROBE))
            return

        #Define a construção de Assimiladores nos vespene geysers próximos a cada nexus existente
        for nexus in self.units(NEXUS).ready:
            vespene_geysers = self.state.vespene_geyser.closer_than(10.0, nexus)
            for vg in vespene_geysers:
                if not self.can_afford(ASSIMILATOR):
                    break
                worker = self.select_build_worker(vg.position)
                if worker is None:
                    break
                if not self.units(ASSIMILATOR).closer_than(1.0, vg).exists:
                    await self.do(worker.build(ASSIMILATOR, vg))

                #Se existir algum pylon construído, constrói portal -> cyberneticscore -> + 1 + 2x portais aonde x é o número de nexus
        if self.estado_passivo == 'construir':
                if self.units(PYLON).ready.exists:
                        if  not self.units(GATEWAY).ready.exists and not self.units(WARPGATE).ready.exists:
                                if self.can_afford(GATEWAY) and not self.already_pending(GATEWAY):
                                        await self.build(GATEWAY, near=self.units(PYLON).ready.random)
                        elif not self.units(CYBERNETICSCORE).exists and not self.already_pending(CYBERNETICSCORE):
                                if self.can_afford(CYBERNETICSCORE):
                                        await self.build(CYBERNETICSCORE, near=self.units(PYLON).ready.random)
                        elif self.can_afford(GATEWAY) and (self.units(WARPGATE).amount + self.units(GATEWAY).amount) < (self.units(NEXUS).amount*2 + 2):
                                await self.build(GATEWAY, near=self.units(PYLON).ready.random)
                        else:
                                self.estado_passivo = 'treinar'
                                print ('treinar')

        if self.estado_passivo == 'treinar':
                for gateway in self.units(GATEWAY).ready:
                        if self.can_afford(STALKER) and gateway.noqueue and self.units(CYBERNETICSCORE).ready and self.supply_left > 1:
                                await self.do(gateway.train(STALKER))
                if iteration > 500*(self.units(NEXUS).amount):
                        self.estado_passivo = 'expandir'
                        print ('expandir')

        for stalker in (self.units(STALKER).idle):
                await self.do(stalker.attack(self.enemy_start_locations[0]))


def main():
    sc2.run_game(sc2.maps.get("Abyssal Reef LE"), [
        Bot(Race.Protoss, MyBot()),
        Computer(Race.Terran, Difficulty.Easy)
    ], realtime=False)

if __name__ == '__main__':
    main()
